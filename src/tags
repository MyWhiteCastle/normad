!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
L	lif.py	/^    def L(self, t1, t2):$/;"	m	class:neuron
LNonOverlap	lif.py	/^    def LNonOverlap(self, Smax, Smin):$/;"	m	class:neuron
LOverlapPrevious	lif.py	/^    def LOverlapPrevious(self, Smax, Smin, index):$/;"	m	class:neuron
SCorrelation	lif.py	/^    def SCorrelation(self, S1, S2):$/;"	m	class:neuron
SCorrelationSIMPLE	lif.py	/^    def SCorrelationSIMPLE(self, S1, S2, dt):$/;"	m	class:neuron
__init__	lif.py	/^    def __init__(self, N=40, T=30):$/;"	m	class:neuron
_groups	lif.py	/^    def _groups(self):$/;"	m	class:neuron
_input_output	lif.py	/^    def _input_output(self, indices=None, times=None, desired=None):$/;"	m	class:neuron
matches	lif.py	/^    def matches(self, S1, S2):$/;"	m	class:neuron
n_inputs	lif.py	/^    def n_inputs(self, na, nb):$/;"	m	class:neuron
n_outputs	lif.py	/^    def n_outputs(self, ma, mb):$/;"	m	class:neuron
neuron	lif.py	/^class neuron:$/;"	c
nn	driver.py	/^nn = lif.neuron()$/;"	v
plot	lif.py	/^    def plot(self, save=False, show=True, i=None):$/;"	m	class:neuron
plot_actual	lif.py	/^    def plot_actual(self):$/;"	m	class:neuron
plot_desired	lif.py	/^    def plot_desired(self):$/;"	m	class:neuron
print_dw_vec	lif.py	/^    def print_dw_vec(self, dw, r):$/;"	m	class:neuron
print_dws	lif.py	/^    def print_dws(self, dw):$/;"	m	class:neuron
read_weights	lif.py	/^    def read_weights(self, fname='weights.txt'):$/;"	m	class:neuron
reset	lif.py	/^    def reset(self):$/;"	m	class:neuron
run	lif.py	/^    def run(self, T=None):$/;"	m	class:neuron
save_weights	lif.py	/^    def save_weights(self, fname='weights.txt'):$/;"	m	class:neuron
supervised_update	lif.py	/^    def supervised_update(self, display=True):$/;"	m	class:neuron
supervised_update_setup	lif.py	/^    def supervised_update_setup(self):$/;"	m	class:neuron
test	lif.py	/^    def test(self, N=100, K=250, T=80):$/;"	m	class:neuron
times_format	lif.py	/^    def times_format(self):$/;"	m	class:neuron
train	lif.py	/^    def train(self, T=None, dsp=True):$/;"	m	class:neuron
untrained	lif.py	/^    def untrained(self):$/;"	m	class:neuron
untrained	lif.py	/^    def untrained(self, Dt=1.0):$/;"	m	class:neuron
