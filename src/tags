!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
F	lif.py	/^    def F(self, S, t):$/;"	m	class:net
L	lif.py	/^    def L(self, t1, t2):$/;"	m	class:net
LNonOverlap	lif.py	/^    def LNonOverlap(self, Smax, Smin):$/;"	m	class:net
LOverlapPrevious	lif.py	/^    def LOverlapPrevious(self, Smax, Smin, index):$/;"	m	class:net
SC_step	lif.py	/^    def SC_step(self, total, t1, t2, int1, int2, i, j, S1, S2):$/;"	m	class:net
SCorrelation	lif.py	/^    def SCorrelation(self, S1, S2):$/;"	m	class:net
SCorrelationSIMPLE	lif.py	/^    def SCorrelationSIMPLE(self, S1, S2, dt):$/;"	m	class:net
SCorrelationSlow	lif.py	/^    def SCorrelationSlow(self, S1, S2, dt=0.05):$/;"	m	class:net
__groups	lif.py	/^    def __groups(self):$/;"	m	class:net	file:
__init__	lif.py	/^    def __init__(self, N_hidden=2, N_input=4, data='mnist', seed=5):$/;"	m	class:net
__init__	lift.py	/^    def __init__(self, neuron=None, seed=5, Na=None, Nb=None):$/;"	m	class:lif_tester
__load	lif.py	/^    def __load(self):$/;"	m	class:net	file:
_equal_len_SC	lif.py	/^    def _equal_len_SC(self, S1, S2):$/;"	m	class:net
_equal_len_SC	lif.py	/^    def _equal_len_SC(self, Smax, Smin):$/;"	m	class:net
_get_random_spikes	lift.py	/^    def _get_random_spikes(self, N, r, Ti, Tf, spacing, g_indices=True):$/;"	m	class:lif_tester
_input_output	lift.py	/^    def _input_output(self, classes=1):$/;"	m	class:lif_tester
_poisson	lift.py	/^    def _poisson(self, r, spacing, Ti, Tf):$/;"	m	class:lif_tester
_prel_SC	lif.py	/^    def _prel_SC(self, Smax, Smin):$/;"	m	class:net
_spaced_next_number	lift.py	/^    def _spaced_next_number(self, spacing, a):$/;"	m	class:lif_tester
accuracy	lif.py	/^    def accuracy(self, a=0, b=50000, data='train'):$/;"	m	class:net
current	derivation.py	/^current = sp.exp(-(t - tl[i]) \/ tauA) - sp.exp(-(t - tl[i]) \/ tauB)$/;"	v
diffeq	derivation.py	/^diffeq = sp.Eq(v(t).diff(t), Cm*(-gL*(v(t) - v0) + current(t)))$/;"	v
fill_spiketimeslist	lif.py	/^    def fill_spiketimeslist(self, digit=0, start=0, number=10, kind='train'):$/;"	m	class:net
i	derivation.py	/^i = 0$/;"	v
lif_tester	lift.py	/^class lif_tester:$/;"	c
matches	lif.py	/^    def matches(self, S1, S2):$/;"	m	class:net
net	lif.py	/^class net:$/;"	c
network	driver.py	/^network = lif.net()$/;"	v
neuron_right_outputs	lif.py	/^    def neuron_right_outputs(self, index=None):$/;"	m	class:net
output_class	lif.py	/^    def output_class(self):$/;"	m	class:net
plot	lif.py	/^    def plot(self, save=False, show=True, i=None):$/;"	m	class:net
plot_actual	lif.py	/^    def plot_actual(self):$/;"	m	class:net
plot_desired	lif.py	/^    def plot_desired(self):$/;"	m	class:net
print_dw_vec	lif.py	/^    def print_dw_vec(self, dw, r):$/;"	m	class:net
print_dws	lif.py	/^    def print_dws(self, dw):$/;"	m	class:net
print_neurons_fired	lif.py	/^    def print_neurons_fired(self):$/;"	m	class:net
read_image	lif.py	/^    def read_image(self, index, kind='train'):$/;"	m	class:net
read_weights	lif.py	/^    def read_weights(self, fname='weights.txt'):$/;"	m	class:net
reset	lif.py	/^    def reset(self):$/;"	m	class:net
rflatten	lif.py	/^    def rflatten(self, A):$/;"	m	class:net
rflatten	lift.py	/^    def rflatten(self, A):$/;"	m	class:lif_tester
run	lif.py	/^    def run(self, T):$/;"	m	class:net
save_weights	lif.py	/^    def save_weights(self, fname='weights.txt'):$/;"	m	class:net
set_train_spikes	lif.py	/^    def set_train_spikes(self, indices=[], times=[], desired=[]):$/;"	m	class:net
setup	lift.py	/^    def setup(self, classes=1):$/;"	m	class:lif_tester
single_neuron_update	lif.py	/^    def single_neuron_update(self, dw, m, n, c, neuron_index, time_index):$/;"	m	class:net
supervised_update	lif.py	/^    def supervised_update(self, display=False):$/;"	m	class:net
supervised_update_setup	lif.py	/^    def supervised_update_setup(self):$/;"	m	class:net
t	derivation.py	/^t = sp.symbols('t')$/;"	v
tdiff_rms	lif.py	/^    def tdiff_rms(self):$/;"	m	class:net
test	lif.py	/^    def test(self, N=100, K=250, T=80):$/;"	m	class:net
test	lift.py	/^    def test(self, classes=1):$/;"	m	class:lif_tester
test_SC	lift.py	/^    def test_SC(self):$/;"	m	class:lif_tester
test_spike_consistency	lift.py	/^    def test_spike_consistency(self, classes=1, spacing=5):$/;"	m	class:lif_tester
test_weight_order	lif.py	/^    def test_weight_order(self):$/;"	m	class:net
times_format	lif.py	/^    def times_format(self):$/;"	m	class:net
tl	derivation.py	/^tl = sp.symbols('tl:4')$/;"	v
train	lif.py	/^    def train(self, a, b, threshold=0.7):$/;"	m	class:net
train_digit	lif.py	/^    def train_digit(self, digit=0, start=0, number=10, kind='train'):$/;"	m	class:net
train_digit_step	lif.py	/^    def train_digit_step(self, spike_times, digit=0, start=0, number=10, kind='train'):$/;"	m	class:net
train_epoch	lif.py	/^    def train_epoch(self, a, b, dsp=True):$/;"	m	class:net
train_step	lif.py	/^    def train_step(self, T=None):$/;"	m	class:net
uniform_input	lif.py	/^    def uniform_input(self):$/;"	m	class:net
untrained	lif.py	/^    def untrained(self):$/;"	m	class:net
