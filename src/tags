!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
F	spike_correlation.py	/^def F(self, S, t):$/;"	f
L	spike_correlation.py	/^def L(self, t1, t2):$/;"	f
LNonOverlap	spike_correlation.py	/^def LNonOverlap(self, Smax, Smin):$/;"	f
LOverlapPrevious	spike_correlation.py	/^def LOverlapPrevious(self, Smax, Smin, index):$/;"	f
SC_step	spike_correlation.py	/^def SC_step(self, total, t1, t2, int1, int2, i, j, S1, S2):$/;"	f
SCorrelation	spike_correlation.py	/^def SCorrelation(self, S1, S2):$/;"	f
SCorrelationSIMPLE	spike_correlation.py	/^def SCorrelationSIMPLE(self, S1, S2, dt):$/;"	f
SCorrelationSlow	spike_correlation.py	/^def SCorrelationSlow(self, S1, S2, dt=0.05):$/;"	f
__groups	lif.py	/^    def __groups(self):$/;"	m	class:net	file:
__init__	lif.py	/^    def __init__(self, N_hidden=20, N_output=10, N_input=4, data='mnist', seed=5):$/;"	m	class:net
__init__	lift.py	/^    def __init__(self, neuron=None, seed=5, Na=None, Nb=None):$/;"	m	class:lif_tester
_equal_len_SC	spike_correlation.py	/^def _equal_len_SC(self, S1, S2):$/;"	f
_equal_len_SC	spike_correlation.py	/^def _equal_len_SC(self, Smax, Smin):$/;"	f
_get_random_spikes	lift.py	/^    def _get_random_spikes(self, N, r, Ti, Tf, spacing, g_indices=True):$/;"	m	class:lif_tester
_input_output	lift.py	/^    def _input_output(self, classes=1):$/;"	m	class:lif_tester
_poisson	lift.py	/^    def _poisson(self, r, spacing, Ti, Tf):$/;"	m	class:lif_tester
_prel_SC	spike_correlation.py	/^def _prel_SC(self, Smax, Smin):$/;"	f
_spaced_next_number	lift.py	/^    def _spaced_next_number(self, spacing, a):$/;"	m	class:lif_tester
accuracy	lif.py	/^    def accuracy(self, a=0, b=50000, data='train'):$/;"	m	class:net
current	derivation.py	/^current = sp.exp(-(t - tl[i]) \/ tauA) - sp.exp(-(t - tl[i]) \/ tauB)$/;"	v
diffeq	derivation.py	/^diffeq = sp.Eq(v(t).diff(t), Cm*(-gL*(v(t) - v0) + current(t)))$/;"	v
i	derivation.py	/^i = 0$/;"	v
larger_indices	train.py	/^def larger_indices(a, B):$/;"	f
lif_tester	lift.py	/^class lif_tester:$/;"	c
load	lif.py	/^    def load(self):$/;"	m	class:net
matches	spike_correlation.py	/^def matches(self, S1, S2):$/;"	f
net	lif.py	/^class net:$/;"	c
neuron_right_outputs	lif.py	/^    def neuron_right_outputs(self):$/;"	m	class:net
nn	driver.py	/^nn = lif.net(N_hidden=7, N_input=4)$/;"	v
normad_supervised_update_setup	train.py	/^def normad_supervised_update_setup(self):$/;"	f
output_class	lif.py	/^    def output_class(self):$/;"	m	class:net
plot	display.py	/^def plot(self, save=False, show=True, i=None):$/;"	f
plot_actual	display.py	/^def plot_actual(self):$/;"	f
plot_desired	display.py	/^def plot_desired(self):$/;"	f
print_dw_vec	display.py	/^def print_dw_vec(self, dw, r):$/;"	f
print_dws	display.py	/^def print_dws(self, dw):$/;"	f
read_image	lif.py	/^    def read_image(self, index, kind='train'):$/;"	m	class:net
read_weights	lif.py	/^    def read_weights(self, fname='weights.txt'):$/;"	m	class:net
reset	lif.py	/^    def reset(self):$/;"	m	class:net
resume_kernel	train.py	/^def resume_kernel(self, s):$/;"	f
resume_supervised_update_setup	train.py	/^def resume_supervised_update_setup(self):$/;"	f
resume_update_hidden_weights	train.py	/^def resume_update_hidden_weights(self):$/;"	f
resume_update_output_weights	train.py	/^def resume_update_output_weights(self):$/;"	f
rflatten	lif.py	/^    def rflatten(self, A):$/;"	m	class:net
rflatten	lift.py	/^    def rflatten(self, A):$/;"	m	class:lif_tester
run	lif.py	/^    def run(self, T):$/;"	m	class:net
save_weights	lif.py	/^    def save_weights(self, fname='weights.txt'):$/;"	m	class:net
set_train_spikes	lif.py	/^    def set_train_spikes(self, indices=[], times=[], desired=[]):$/;"	m	class:net
setup	lift.py	/^    def setup(self, classes=1):$/;"	m	class:lif_tester
single_neuron_update	lif.py	/^    def single_neuron_update(self, dw, m, n, c, neuron_index, time_index):$/;"	m	class:net
smaller_indices	train.py	/^def smaller_indices(a, B):$/;"	f
sort	train.py	/^def sort(S):$/;"	f
supervised_update	train.py	/^def supervised_update(self, display=False, method='resume'):$/;"	f
t	derivation.py	/^t = sp.symbols('t')$/;"	v
tdiff_rms	lif.py	/^    def tdiff_rms(self):$/;"	m	class:net
test	lif.py	/^    def test(self, N=100, K=250, T=80):$/;"	m	class:net
test	lift.py	/^    def test(self, classes=1):$/;"	m	class:lif_tester
test_SC	lift.py	/^    def test_SC(self):$/;"	m	class:lif_tester
test_spike_consistency	lift.py	/^    def test_spike_consistency(self, classes=1, spacing=5):$/;"	m	class:lif_tester
test_weight_order	lif.py	/^    def test_weight_order(self):$/;"	m	class:net
times_format	display.py	/^def times_format(self):$/;"	f
tl	derivation.py	/^tl = sp.symbols('tl:4')$/;"	v
train	lif.py	/^    def train(self, a, b, method='resume', threshold=0.7):$/;"	m	class:net
train_epoch	train.py	/^def train_epoch(self, a, b, method='resume', dsp=True):$/;"	f
train_step	train.py	/^def train_step(self, T=None, method='resume'):$/;"	f
uniform_input	lif.py	/^    def uniform_input(self):$/;"	m	class:net
untrained	spike_correlation.py	/^def untrained(self):$/;"	f
